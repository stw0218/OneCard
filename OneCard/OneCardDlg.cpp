
// OneCardDlg.cpp: 구현 파일
//

#include "pch.h"
#include "framework.h"
#include "OneCard.h"
#include "OneCardDlg.h"
#include "afxdialogex.h"
#include "ChildDlg.h"
//#include "SuitChoiceDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// COneCardDlg 대화 상자

inline BYTE bi1[] = { // 15
    0x4d,0x42,0x31,0x00,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x31,0x0f,0x0f,0x0f,0x27,0x0f,
0x0f,0x0f,0xff,0x0f,0x0f,0x0f,0x77,0x0f,0x0f,0x0f,0x0e,0x0f,0x0e,0x0f,0x0f,0x0f,
0x0f,0x0f,0x0f,0x00,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,
0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0xf0,0xf0,0xf0,0x0f,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf1,0x0c,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf3,0x0e,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf3,0x0f,0xee,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf1,0x7f,0xcf,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf7,0x6f,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xf0,0xfc,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x11,0x70,0xf0,0xf0,0xf0,0xf3,0x77,
0x70,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xec,0xee,0xf0,0xf0,0x10,0x0c,0xf3,0x30,0x80,0x11,0x30,0x00,0xe8,0xc8,0x8f,0x73,
0x70,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xcc,0xef,0xf0,0x10,0x13,0x0f,0xff,0x00,0x80,0x11,0x33,0x0c,0xc8,0xc9,0x0f,0x73,
0x70,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xcc,0xef,0xf0,0x10,0x17,0x0f,0xff,0x00,0x80,0x11,0x37,0x0c,0xc8,0xc9,0x0f,0x73,
0x70,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xcc,0xef,0xf0,0x10,0x17,0x77,0xf7,0x00,0x80,0x13,0x33,0x08,0xc8,0xcb,0x3f,0x73,
0x70,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0x8e,0xcf,0x70,0x11,0x17,0xf0,0xf1,0x30,0x80,0x13,0x30,0x10,0xcc,0xcb,0x77,0x73,
0x70,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0x8e,0xcf,0x70,0x11,0x1f,0x30,0xf1,0x30,0x80,0x13,0x70,0x10,0xcc,0xcb,0x73,0x73,
0x30,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0x8f,0xcb,0x30,0x11,0x17,0x08,0xf1,0x30,0x80,0x13,0x70,0x10,0xcc,0xcb,0x73,0x71,
0x10,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0x8f,0xc9,0x30,0x01,0x37,0x0e,0xf1,0x30,0x89,0x13,0x70,0x10,0xce,0xcb,0x73,0x33,
0x10,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
};

inline BYTE bi6[] = {
    0x38,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0x1f,0x01,0x18,0x05,0x3f,0x77,0xf9,0x38,0x87,0x0f,0x78,0x18,0xc7,0x81,0x1b,0x3b,
0x78,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0x1b,0x00,0x18,0x07,0x3b,0x07,0xf9,0x38,0x87,0x07,0x78,0x18,0xc7,0x09,0x07,0x3b,
0x78,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf9,
0x1b,0x08,0x08,0x07,0x39,0x06,0xf9,0x38,0x87,0x07,0xf8,0x18,0xc7,0x08,0x07,0x7b,
0x78,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf9,
0x1b,0x08,0x88,0x17,0x78,0x04,0xf9,0x38,0x8b,0x26,0xf8,0x08,0xe1,0x18,0xc7,0xfb,
0x78,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf9,
0x3b,0x08,0x88,0x18,0xf8,0xf8,0xff,0x38,0xd8,0xf8,0xfb,0x08,0xf8,0xf8,0xf8,0xfb,
0x78,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xfb,
};

inline BYTE bi2[] = { // 15 14
    0x24,0x0c,0x63,0xea,0x35,0xe8,0x24,0xec,0xeb,0xd7,0xeb,0xeb,0x14,0x17,0x17,0xe8,
0x54,0xeb,0xeb,0xe4,0xeb,0x9b,0x94,0xeb,0xe5,0xd3,0xeb,0xeb,0x14,0x14,0xeb,0xea,
0x24,0x0c,0xeb,0xea,0x35,0xaa,0x35,0xec,0xeb,0xd3,0x18,0x0b,0x14,0x17,0x14,0xe8,
0x15,0xeb,0xeb,0xe5,0xeb,0x93,0x9c,0xeb,0xe5,0xd3,0xeb,0xeb,0x14,0x14,0xeb,0xea,
0x04,0x0c,0xeb,0xe8,0x35,0x14,0x14,0xec,0x0b,0xd2,0x14,0x1b,0x04,0x37,0x14,0x28,
0x14,0xeb,0xeb,0xe5,0xeb,0xd3,0x1c,0x6b,0xf5,0xd3,0x8b,0xeb,0x14,0x14,0xeb,0xeb,
0x15,0x1c,0xea,0x14,0x25,0x14,0x14,0xec,0x17,0xd0,0x14,0x13,0x0c,0x37,0x18,0x08,
0x14,0x6b,0xeb,0xe5,0xeb,0xd3,0x08,0x6b,0x17,0xd7,0x9b,0xeb,0x14,0x14,0xeb,0xeb,
0x15,0x94,0xe8,0x14,0x65,0xd4,0x0c,0xec,0x15,0xd0,0x35,0xd3,0x0c,0x75,0x92,0x08,
0x6c,0x2b,0xeb,0xe4,0xeb,0xd6,0x08,0x6a,0x17,0xd5,0x1b,0xeb,0x14,0x14,0xeb,0xeb,
0x15,0x94,0xec,0x15,0xe4,0xeb,0x6c,0xec,0x14,0xd0,0x65,0xd7,0x0c,0x65,0x94,0x08,
0x6a,0x0b,0xeb,0xe4,0xeb,0xd6,0x28,0x28,0x17,0xd4,0x1b,0xeb,0x14,0x14,0xeb,0xeb,
0x17,0x95,0xec,0x6b,0xec,0xeb,0xec,0xec,0xe4,0xd0,0x2f,0xd7,0x08,0x65,0xd4,0x08,
0x6a,0x0b,0xeb,0xec,0xeb,0xd6,0x2a,0x2a,0x17,0xd4,0x0b,0xeb,0x14,0x14,0xeb,0xeb,
0x17,0xd5,0xec,0xeb,0xec,0x6b,0xec,0xec,0xec,0xd6,0x1b,0xd7,0x28,0x65,0xe4,0x68,
0x6a,0x0b,0xeb,0xec,0x6b,0xd6,0x2a,0x2b,0xf5,0xd8,0x0b,0xeb,0x14,0x14,0xeb,0xeb,
0x97,0xd5,0xec,0xeb,0xe8,0x2b,0xec,0xec,0xec,0xd7,0x13,0xd3,0xeb,0xeb,0xeb,0xe8,
0x68,0x2b,0xeb,0xe8,0x2b,0xd3,0xeb,0xeb,0xe5,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0x97,0xd5,0xec,0x2b,0xe8,0x08,0x6c,0xec,0xe4,0xf5,0x93,0x93,0xeb,0xeb,0xeb,0xe8,
0x6c,0x2b,0xeb,0xe8,0x0b,0x93,0xeb,0xe5,0xf5,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0x97,0xd5,0xe8,0x14,0x6a,0x14,0x6c,0x6c,0x14,0xf4,0xeb,0x13,0xeb,0xeb,0xeb,0xe8,
0x14,0x6b,0xeb,0xea,0x14,0x1b,0xeb,0xe4,0x17,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0x93,0xf5,0xea,0x14,0x6b,0x14,0x68,0x0c,0x15,0xe4,0x14,0x1b,0xeb,0xeb,0xeb,0xe8,
0x15,0xeb,0xeb,0xeb,0x14,0x1b,0xeb,0xec,0x17,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0xd3,0xf7,0xeb,0x94,0xeb,0x94,0xe8,0x18,0x13,0xec,0x14,0x0b,0xeb,0xeb,0xeb,0xe8,
0x17,0xeb,0xeb,0xeb,0xd4,0x2b,0xeb,0xe8,0x13,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xea,0x0b,0x2b,0xe8,0x14,0x6b,0xeb,0xeb,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xef,0xeb,0xeb,0xeb,0xab,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0x97,0xeb,0xeb,0xeb,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0x14,0x14,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,
0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0xeb,0x14,0x14
};

inline BYTE bi4[] = {
    0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf3,0x10,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,
0xf0,0xff,0x0f,0x00,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf0,
0xf0,0xf1,0x70,0xf0,0xf0,0xf0,0xf7,0x70,0xf0,0xf0,0x8c,0xf0,0xf0,0xf0,0xf0,0xf0,
0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf3,
0x73,0x71,0x33,0x0c,0xf3,0x08,0xf7,0xf6,0xf0,0xf1,0x0f,0x70,0xc0,0x90,0xef,0x33,
0x70,0x90,0xf0,0xf0,0x8f,0xf0,0xec,0xf3,0x00,0xc0,0xf0,0xf0,0x0f,0x0f,0xf0,0xf3,
0x73,0x73,0x3f,0x0f,0xf7,0x0e,0xf7,0xf7,0xf0,0xf7,0x0f,0x30,0x88,0x00,0xcf,0x13,
0x70,0x00,0xf0,0xf1,0x0f,0x70,0xec,0xf7,0x08,0xc8,0xf0,0xf0,0x0f,0x0f,0xf0,0xf3,
0x37,0x33,0x6f,0x0f,0x7f,0x0f,0xf7,0xf7,0xf0,0xff,0x0f,0x30,0x88,0x08,0x8f,0x03,
0x71,0x10,0xf0,0xf3,0x0f,0x30,0xcc,0xff,0x0c,0xc8,0xf0,0xf0,0x0f,0x0f,0xf0,0xf3,
0x37,0x33,0x6e,0xff,0x3f,0xff,0x77,0xf7,0xf0,0xef,0xf0,0x30,0x8c,0x08,0x08,0x03,
0x77,0x10,0xf0,0xf7,0x33,0x10,0xce,0xee,0xee,0xc8,0xf0,0xf0,0x0f,0x0f,0xf0,0xf3,
};

inline BYTE bi5[] = {
    0x78,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf9,
0x1b,0x08,0x08,0x07,0x39,0x06,0xf9,0x38,0x87,0x07,0xf8,0x18,0xc7,0x08,0x07,0x7b,
0x78,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf9,
0x1b,0x08,0x88,0x17,0x78,0x04,0xf9,0x38,0x8b,0x26,0xf8,0x08,0xe1,0x18,0xc7,0xfb,
0x78,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf9,
0x3b,0x08,0x88,0x18,0xf8,0xf8,0xff,0x38,0xd8,0xf8,0xfb,0x08,0xf8,0xf8,0xf8,0xfb,
0x78,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xfb,
0x39,0x08,0x80,0x18,0xf8,0xf8,0xf7,0x38,0xf8,0xf8,0xff,0x08,0xf8,0xf8,0xf8,0xfb,
0x78,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xfb,
0x39,0x08,0xc0,0x18,0xf8,0xf8,0xff,0x38,0xf8,0xf8,0xfb,0x08,0xf8,0xf8,0xf8,0xff,
0x78,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xfb,
0x78,0x08,0xc0,0x18,0xf8,0xf8,0xfb,0x38,0xf8,0xf8,0xf9,0x08,0xf8,0xf8,0xf8,0xe7,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xfb,
0x78,0x18,0xc0,0x18,0xf8,0xf8,0xf9,0x38,0xf8,0xf8,0xf8,0x18,0xf8,0xf8,0xf8,0xc7,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0x38,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xe6,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf9,0x18,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf7,0x07,0x08,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xfb,0x08,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xe7,0x07,0x08,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xfb,0x18,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf7,0x07,0x08,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf9,0x78,0xf8,0xf8,0xf8,0xff,0x78,0xf8,0xf8,0x84,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xfb,
0x7b,0x79,0x3b,0x04,0xfb,0x00,0xff,0xfe,0xf8,0xf9,0x07,0x78,0xc8,0x98,0xe7,0x3b,
0x78,0x98,0xf8,0xf8,0x87,0xf8,0xe4,0xfb,0x08,0xc8,0xf8,0xf8,0x07,0x07,0xf8,0xfb,
0x7b,0x7b,0x37,0x07,0xff,0x06,0xff,0xff,0xf8,0xff,0x07,0x38,0x80,0x08,0xc7,0x1b,
0x78,0x08,0xf8,0xf9,0x07,0x78,0xe4,0xff,0x00,0xc0,0xf8,0xf8,0x07,0x07,0xf8,0xfb,
0x3f,0x3b,0x67,0x07,0x77,0x07,0xff,0xff,0xf8,0xf7,0x07,0x38,0x80,0x00,0x87,0x0b,
};

inline BYTE bi3[] = { // 15 14 13
    0x0f,0xc1,0x18,0x09,0x3f,0xe7,0xf9,0x38,0x85,0x1b,0x78,0x18,0xc6,0xc3,0x39,0x3b,
0x38,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0x1f,0x01,0x18,0x05,0x3f,0x77,0xf9,0x38,0x87,0x0f,0x78,0x18,0xc7,0x81,0x1b,0x3b,
0x78,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0x1b,0x00,0x18,0x07,0x3b,0x07,0xf9,0x38,0x87,0x07,0x78,0x18,0xc7,0x09,0x07,0x3b,
0x78,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf9,
0x1b,0x08,0x08,0x07,0x39,0x06,0xf9,0x38,0x87,0x07,0xf8,0x18,0xc7,0x08,0x07,0x7b,
0x78,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf9,
0x1b,0x08,0x88,0x17,0x78,0x04,0xf9,0x38,0x8b,0x26,0xf8,0x08,0xe1,0x18,0xc7,0xfb,
0x78,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf9,
0x3b,0x08,0x88,0x18,0xf8,0xf8,0xff,0x38,0xd8,0xf8,0xfb,0x08,0xf8,0xf8,0xf8,0xfb,
0x78,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xfb,
0x39,0x08,0x80,0x18,0xf8,0xf8,0xf7,0x38,0xf8,0xf8,0xff,0x08,0xf8,0xf8,0xf8,0xfb,
0x78,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xfb,
0x39,0x08,0xc0,0x18,0xf8,0xf8,0xff,0x38,0xf8,0xf8,0xfb,0x08,0xf8,0xf8,0xf8,0xff,
0x78,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xfb,
0x78,0x08,0xc0,0x18,0xf8,0xf8,0xfb,0x38,0xf8,0xf8,0xf9,0x08,0xf8,0xf8,0xf8,0xe7,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xfb,
0x78,0x18,0xc0,0x18,0xf8,0xf8,0xf9,0x38,0xf8,0xf8,0xf8,0x18,0xf8,0xf8,0xf8,0xc7,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0x38,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xe6,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf9,0x18,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf7,0x07,0x08,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xfb,0x08,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xe7,0x07,0x08,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xfb,0x18,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf7,0x07,0x08,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xf8,
0xf8,0xf9,0x78,0xf8,0xf8,0xf8,0xff,0x78,0xf8,0xf8,0x84,0xf8,0xf8,0xf8,0xf8,0xf8,
0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0x07,0x07,0xf8,0xfb,
0x7b,0x79,0x3b,0x04,0xfb,0x00,0xff,0xfe,0xf8,0xf9,0x07,0x78,0xc8,0x98,0xe7,0x3b,
0x78,0x98,0xf8,0xf8,0x87,0xf8,0xe4,0xfb,0x08,0xc8,0xf8,0xf8,0x07,0x07,0xf8,0xfb,
0x7b,0x7b,0x37,0x07,0xff,0x06,0xff,0xff,0xf8,0xff,0x07,0x38,0x80,0x08,0xc7,0x1b,
0x78,0x08,0xf8,0xf9,0x07,0x78,0xe4,0xff,0x00,0xc0,0xf8,0xf8,0x07,0x07,0xf8,0xfb,
0x3f,0x3b,0x67,0x07,0x77,0x07,0xff,0xff,0xf8,0xf7,0x07,0x38,0x80,0x00,0x87,0x0b,
0x79,0x18,0xf8,0xfb,0x07,0x38,0xc4,0xf7,0x04,0xc0,0xf8,0xf8,0x07,0x07,0xf8,0xfb,
0x3f,0x3b,0x66,0xf7,0x37,0xf7,0x7f,0xff,0xf8,0xe7,0xf8,0x38,0x84,0x00,0x00,0x0b,
0x7f,0x18,0xf8,0xff,0x3b,0x18,0xc6,0xe6,0xe6,0xc0,0xf8,0xf8,0x07,0x07,0xf8,0xfb,
0x3f,0x3b,0x64,0xfb,0x36,0xff,0x7f,0xff,0xf8,0xe6,0xf8,0xf8,0x85,0x00,0x08,0xfb,
0x77,0x38,0xf8,0xff,0x78,0x08,0x86,0xf4,0xf6,0xc0,0xf8,0xf8,0x07,0x07,0xf8,0xf9
};



COneCardDlg::COneCardDlg(CWnd* pParent /*=nullptr*/)
	: CDialogEx(IDD_ONECARD_DIALOG, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
    m_nHighlightedCardIndex = -1;
}

COneCardDlg::~COneCardDlg()
{
    // m_cardImages 배열에 저장된 모든 CImage* 포인터를 순회하며 메모리를 해제합니다.
    for (int i = 0; i < m_cardImages.GetSize(); i++)
    {
        delete m_cardImages[i];
    }
    m_cardImages.RemoveAll();
}

void COneCardDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(COneCardDlg, CDialogEx)
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_BN_CLICKED(IDOK, &COneCardDlg::OnBnClickedOk)
	ON_BN_CLICKED(IDCANCEL, &COneCardDlg::OnBnClickedCancel)
    ON_WM_SIZE()
    ON_WM_LBUTTONDOWN()
    ON_WM_TIMER()
    ON_WM_ERASEBKGND()
    ON_WM_MOUSEMOVE()
    ON_WM_DESTROY()
    ON_MESSAGE(WM_APP_SHOW_FLAG_DIALOG, &COneCardDlg::OnShowDialog)
END_MESSAGE_MAP()


// COneCardDlg 메시지 처리기

BOOL COneCardDlg::OnInitDialog()
{
    CDialogEx::OnInitDialog();

    // --- ★★★ 이미지 프리로딩(Pre-loading) 시작 ★★★ ---

    // 1. 로드할 모든 리소스 ID를 준비합니다.
    int resourceIDs[4][13] = {
        {IDB_CLUB_ACE, IDB_CLUB_2, IDB_CLUB_3, IDB_CLUB_4, IDB_CLUB_5, IDB_CLUB_6,
        IDB_CLUB_7, IDB_CLUB_8, IDB_CLUB_9, IDB_CLUB_10, IDB_CLUB_JACK, IDB_CLUB_QUEEN, IDB_CLUB_KING},
        {IDB_DIAMOND_ACE, IDB_DIAMOND_2, IDB_DIAMOND_3, IDB_DIAMOND_4, IDB_DIAMOND_5, IDB_DIAMOND_6,
        IDB_DIAMOND_7, IDB_DIAMOND_8, IDB_DIAMOND_9, IDB_DIAMOND_10, IDB_DIAMOND_JACK, IDB_DIAMOND_QUEEN, IDB_DIAMOND_KING},
        {IDB_HEART_ACE, IDB_HEART_2, IDB_HEART_3, IDB_HEART_4, IDB_HEART_5, IDB_HEART_6,
        IDB_HEART_7, IDB_HEART_8, IDB_HEART_9, IDB_HEART_10, IDB_HEART_JACK, IDB_HEART_QUEEN, IDB_HEART_KING},
        {IDB_SPADE_ACE, IDB_SPADE_2, IDB_SPADE_3, IDB_SPADE_4, IDB_SPADE_5, IDB_SPADE_6,
        IDB_SPADE_7, IDB_SPADE_8, IDB_SPADE_9, IDB_SPADE_10, IDB_SPADE_JACK, IDB_SPADE_QUEEN, IDB_SPADE_KING},
    };
    int jokerIDs[] = { IDB_JOKER_BLACK, IDB_JOKER_RED };
    int backID = IDB_CARD_BACK;

    // 2. 이미지 저장소를 깨끗하게 비웁니다.
    m_cardImages.RemoveAll();
    m_mapCardIDtoIndex.RemoveAll();

    // 3. 이미지 로딩을 위한 람다 함수 정의 (오류 수정 및 간결화)
    auto LoadCardImage = [&](int resourceID) {
        CImage* pImage = new CImage();

        HRSRC hRes = ::FindResource(AfxGetInstanceHandle(), MAKEINTRESOURCE(resourceID), _T("PNG"));
        if (hRes == NULL) {
            TRACE(L"!!! LoadCardImage failed: FindResource for ID %d (PNG) returned NULL. !!!\n", resourceID);
            return;
        }

        DWORD len = ::SizeofResource(AfxGetInstanceHandle(), hRes);
        HGLOBAL hResData = ::LoadResource(AfxGetInstanceHandle(), hRes);
        if (hResData == NULL) {
            TRACE(L"!!! LoadCardImage failed: LoadResource for ID %d returned NULL. !!!\n", resourceID);
            return;
        }

        void* pResData = ::LockResource(hResData);
        if (pResData == NULL) {
            TRACE(L"!!! LoadCardImage failed: LockResource for ID %d returned NULL. !!!\n", resourceID);
            return;
        }

        HGLOBAL hGlobal = ::GlobalAlloc(GMEM_MOVEABLE, len);
        if (hGlobal == NULL) {
            TRACE(L"!!! LoadCardImage failed: GlobalAlloc for ID %d returned NULL. !!!\n", resourceID);
            return;
        }

        void* pBuffer = ::GlobalLock(hGlobal);
        if (pBuffer == NULL) {
            ::GlobalFree(hGlobal); // 할당한 hGlobal 해제
            TRACE(L"!!! LoadCardImage failed: GlobalLock for ID %d returned NULL. !!!\n", resourceID);
            return;
        }

        memcpy(pBuffer, pResData, len);
        ::GlobalUnlock(hGlobal);

        IStream* pStream = NULL;
        if (SUCCEEDED(::CreateStreamOnHGlobal(hGlobal, TRUE, &pStream)))
        {
            if (SUCCEEDED(pImage->Load(pStream))) // pImage->Load()
            {
                // ★ 로드 성공 시: CImage 포인터를 배열에 추가
                INT_PTR nIndex = m_cardImages.Add(pImage);
                m_mapCardIDtoIndex.SetAt(resourceID, (int)nIndex);
            }
            else
            {
                delete pImage; // 로드 실패 시 할당한 메모리 즉시 해제
                TRACE(L"!!! LoadCardImage failed: CImage::Load for ID %d failed. !!!\n", resourceID);
            }
            pStream->Release();
        }
        else
        {
            delete pImage; // 스트림 생성 실패 시에도 메모리 해제
            ::GlobalFree(hGlobal);
            TRACE(L"!!! LoadCardImage failed: CreateStreamOnHGlobal for ID %d failed. !!!\n", resourceID);
        }
        };

    // 4. 정의된 람다 함수를 이용해 모든 카드를 로드합니다.
    for (int i = 0; i < 4; ++i)
        for (int j = 0; j < 13; ++j)
            LoadCardImage(resourceIDs[i][j]);

    LoadCardImage(jokerIDs[0]);
    LoadCardImage(jokerIDs[1]);
    LoadCardImage(backID);

    // --- 이미지 프리로딩(Pre-loading) 끝 ---

    m_game.StartGame();

    return TRUE;
}

void COneCardDlg::OnPaint()
{
    CPaintDC dc(this);

    CRect rect;
    GetClientRect(&rect);

    // 1. 메모리 DC와 메모리 비트맵을 생성합니다. (보이지 않는 스케치북)
    CDC memDC;
    memDC.CreateCompatibleDC(&dc);

    CBitmap memBitmap;
    memBitmap.CreateCompatibleBitmap(&dc, rect.Width(), rect.Height());

    // 2. 메모리 DC에 비트맵을 선택하여 그릴 준비를 합니다.
    CBitmap* pOldBmp = memDC.SelectObject(&memBitmap);

    // ===================================================================
    // ★★★ 모든 그리기 코드는 이제 'dc'가 아닌 'memDC'에 그려야 합니다. ★★★
    // ===================================================================

    // 1. 배경 그리기 (memDC에 그립니다)
    memDC.FillSolidRect(rect, RGB(0, 80, 0));

    // 2. 덱, 공개된 카드 그리기 (memDC에 그립니다)
    DrawCard(&memDC, IDB_CARD_BACK, m_deckRect);
    Card openCard = m_game.GetOpenCard();
    if (openCard.resourceID != -1)
    {
        DrawCard(&memDC, openCard.resourceID, m_openCardRect);
    }

    // 3. 컴퓨터 패 그리기 (memDC에 그립니다)
    const auto& comCards = m_game.GetComHand();
    if (!comCards.empty())
    {
        int comCardCount = comCards.size();
        int overlap = m_cardSize.cx * OVERLAP_CARD_RATIO;
        int margin = rect.Width() / 50;

        for (int i = 0; i < comCardCount; ++i)
        {
            CRect cardRect(0, 0, m_cardSize.cx, m_cardSize.cy);
            cardRect.OffsetRect(m_openCardRect.right + margin + i * overlap, margin);
            DrawCard(&memDC, IDB_CARD_BACK, cardRect);
        }
    }

    // 4. 플레이어 패 그리기 (memDC에 그립니다)
    const auto& myCards = m_game.GetPlayerHand();
    if (!myCards.empty())
    {
        int myCardCount = myCards.size();
        int overlap = m_cardSize.cx * OVERLAP_CARD_RATIO;
        int totalHandWidth = (myCardCount - 1) * overlap + m_cardSize.cx;
        int startX = (rect.Width() - totalHandWidth) / 2;
        int margin = rect.Width() / 50;

        for (int i = 0; i < myCardCount; ++i)
        {
            CRect cardRect(0, 0, m_cardSize.cx, m_cardSize.cy);
            cardRect.OffsetRect(startX + i * overlap, rect.Height() - m_cardSize.cy - margin);
            DrawCard(&memDC, myCards[i].resourceID, cardRect);
            if (i == m_nHighlightedCardIndex)
            {
                // 노란색 테두리를 그려서 강조합니다.
                CBrush* pOldBrush = (CBrush*)memDC.SelectStockObject(NULL_BRUSH); // 채우기 없음
                CPen newPen(PS_SOLID, 3, RGB(255, 255, 0)); // 3픽셀 두께의 노란색 펜
                CPen* pOldPen = memDC.SelectObject(&newPen);

                memDC.Rectangle(cardRect); // 카드 영역에 사각형 테두리를 그림

                // 원래 펜과 브러시로 복원
                memDC.SelectObject(pOldPen);
                memDC.SelectObject(pOldBrush);
            }
        }
    }

    // ===================================================================
    // ★★★ 모든 그리기가 끝났습니다. ★★★
    // ===================================================================

    // 3. 메모리 DC에 완성된 그림을 실제 화면 DC로 한 번에 복사합니다.
    dc.BitBlt(0, 0, rect.Width(), rect.Height(), &memDC, 0, 0, SRCCOPY);

    // 4. 사용이 끝난 GDI 객체들을 정리합니다.
    memDC.SelectObject(pOldBmp);
    memBitmap.DeleteObject();
    memDC.DeleteDC();
}

void COneCardDlg::DrawCard(CDC* pDC, int resourceID, CRect destRect)
{
    int nIndex = -1;
    // 1. 맵에서 리소스 ID에 해당하는 이미지 인덱스를 찾습니다.
    if (m_mapCardIDtoIndex.Lookup(resourceID, nIndex))
    {
        if (nIndex >= 0 && nIndex < m_cardImages.GetSize() && !m_cardImages[nIndex]->IsNull())
        {
            // 2. 해당 인덱스의 CImage 객체를 가져와 그립니다. (매우 빠름)
            m_cardImages[nIndex]->Draw(pDC->GetSafeHdc(), destRect);
        }
        else
        {
            // 이미지가 유효하지 않은 경우
            CString str;
            str.Format(_T("!!! DrawCard ERROR: Image at index %d (resourceID %d) is invalid or null. !!!"), nIndex, resourceID);
            TRACE(str);

            pDC->Rectangle(destRect);
            pDC->TextOut(destRect.left + 10, destRect.top + 10, L"ERR");
        }
    }
    else
    {
        // 맵에 없는 경우 (오류)
        CString str;
        str.Format(_T("!!! DrawCard ERROR: resourceID %d not found in map. !!!"), resourceID);
        TRACE(str);

        pDC->Rectangle(destRect);
        pDC->TextOut(destRect.left + 10, destRect.top + 10, L"N/A");
    }
}

// 사용자가 최소화된 창을 끄는 동안에 커서가 표시되도록 시스템에서
//  이 함수를 호출합니다.
HCURSOR COneCardDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}


void COneCardDlg::OnBnClickedOk()
{
	CDialogEx::OnOK();
}

void COneCardDlg::OnBnClickedCancel()
{
	CDialogEx::OnCancel();
}

BOOL COneCardDlg::PreTranslateMessage(MSG* pMsg)
{
	if(pMsg->message == WM_KEYDOWN)
	{
		if (pMsg->wParam == VK_RETURN || pMsg->wParam == VK_ESCAPE)
		{
			return TRUE;
		}
	}

	return CDialogEx::PreTranslateMessage(pMsg);
}

void COneCardDlg::OnSize(UINT nType, int cx, int cy)
{
    CDialogEx::OnSize(nType, cx, cy);

    if (cx == 0 || cy == 0) return; // 창이 최소화되는 등 크기가 0이면 계산하지 않음

    // 1. 새 카드 크기 계산 (창 높이의 1/4 크기로 설정, 가로세로 비율 유지)
    //    - 일반적인 트럼프 카드 비율: 가로:세로 ≈ 2.5 : 3.5 ≈ 0.714
    m_cardSize.cy = cy / 4; // 카드 높이를 창 높이의 25%로 설정
    m_cardSize.cx = static_cast<int>(m_cardSize.cy * 0.714);

    // 2. 덱과 공개된 카드 위치 계산 (상단 배치)
    int margin = cx / 50; // 창 너비의 2%를 여백으로 사용
    m_deckRect.SetRect(margin, margin, margin + m_cardSize.cx, margin + m_cardSize.cy);
    m_openCardRect.SetRect(m_deckRect.right + margin, margin,
        m_deckRect.right + margin + m_cardSize.cx, margin + m_cardSize.cy);

    // 5. 모든 계산이 끝났으므로 화면을 갱신하라고 윈도우에 알림
    Invalidate();
}

void COneCardDlg::OnLButtonDown(UINT nFlags, CPoint point)
{
    // 1. 플레이어 턴이 아니면 아무런 행동도 하지 않음
    if (!m_game.IsPlayerTurn())
    {
        CDialogEx::OnLButtonDown(nFlags, point);
        return;
    }

    TurnResult result = TurnResult::INVALID_PLAY;
    // ... (덱 클릭 또는 카드 클릭 로직) ...
    int clickedCardIndex = GetClickedCardIndex(point);
    if (clickedCardIndex != -1)
    {
        result = m_game.PlayCard(clickedCardIndex);
    }
    else if (m_deckRect.PtInRect(point))
    {
        result = m_game.DrawCard();
    }

    // 턴 결과에 따른 후속 처리
    if (result != TurnResult::INVALID_PLAY)
    {
        Invalidate(); // 일단 화면 갱신

        if (result == TurnResult::REQUIRE_SUIT_CHOICE)
        {
            // 모양 선택 창 띄우기
            //CSuitChoiceDlg dlg;
            //if (dlg.DoModal() == IDOK)
            //{
            //    m_game.SetForcedSuit(dlg.GetSelectedSuit());
            //    SetTimer(TIMER_COM_TURN, DELAY_COM_TURN, NULL); // 컴퓨터 턴 시작
            //}
            m_game.SetForcedSuit(CardSuit::SPADE);
            SetTimer(TIMER_COM_TURN, DELAY_COM_TURN, NULL); // 컴퓨터 턴 시작
        }
        else if (result == TurnResult::GAME_OVER_WIN || result == TurnResult::GAME_OVER_LOSE)
        {
            ProcessGameStatus(result); // 게임 오버 처리
        }
        else if (!m_game.IsPlayerTurn())
        {
            // 일반적인 턴 종료 시 컴퓨터 턴 시작
            SetTimer(TIMER_COM_TURN, DELAY_COM_TURN, NULL);
        }
    }

    CDialogEx::OnLButtonDown(nFlags, point);
}

void COneCardDlg::OnTimer(UINT_PTR nIDEvent)
{
    if (nIDEvent == TIMER_COM_TURN)
    {
        // 1. 타이머를 즉시 종료하여 반복적으로 실행되는 것을 막습니다. (매우 중요)
        KillTimer(TIMER_COM_TURN);

        // 2. 컴퓨터의 턴 로직을 실행합니다.
        m_game.ComTurn();

        // 3. 컴퓨터가 행동한 결과를 화면에 그리도록 갱신을 요청합니다.
        Invalidate();
	}
	else if (nIDEvent == TIMER_FLAG_CHECK)
	{
		KillTimer(TIMER_FLAG_CHECK);
        PostMessage(WM_APP_SHOW_FLAG_DIALOG);
	}

    CDialogEx::OnTimer(nIDEvent);
}

void COneCardDlg::ProcessGameStatus(TurnResult status)
{
    CString message;
    bool bGameOver = false;

    switch (status)
    {
    case TurnResult::GAME_OVER_WIN:
        message = _T("You Win!");
        bGameOver = true;
		SetTimer(TIMER_FLAG_CHECK, 1000, NULL);
        break;
    case TurnResult::GAME_OVER_LOSE:
        message = _T("You Lose.");
        bGameOver = true;
        break;
    case TurnResult::SUCCESS:
        // 게임이 진행 중이면 아무것도 하지 않음
        break;
    }

    if (bGameOver)
    {
        AfxMessageBox(message);
        m_game.StartGame(); // 게임 로직 초기화
        Invalidate();       // 화면을 완전히 새로 그림
    }
}

// 마우스 클릭 좌표를 기반으로 플레이어의 몇 번째 카드가 클릭되었는지 반환하는 함수
// 클릭된 카드가 없으면 -1을 반환
int COneCardDlg::GetClickedCardIndex(CPoint point)
{
    const auto& myCards = m_game.GetPlayerHand();
    if (myCards.empty()) return -1;

    // --- OnPaint와 동일한 카드 위치 계산 로직 ---
    CRect clientRect;
    GetClientRect(&clientRect);

    CSize cardSize;
    cardSize.cy = clientRect.Height() / 4;
    cardSize.cx = static_cast<int>(cardSize.cy * 0.714);

    int overlap = cardSize.cx / 4;
    int myCardCount = myCards.size();
    int totalHandWidth = (myCardCount - 1) * overlap + cardSize.cx;
    int startX = (clientRect.Width() - totalHandWidth) / 2;
    int margin = clientRect.Width() / 50;
    // --- 계산 로직 끝 ---

    // ★★★ 중요: 맨 위에 그려진 카드(오른쪽 카드)부터 역순으로 검사해야 합니다. ★★★
    for (int i = myCardCount - 1; i >= 0; --i)
    {
        CRect cardRect(0, 0, cardSize.cx, cardSize.cy);
        cardRect.OffsetRect(startX + i * overlap, clientRect.Height() - cardSize.cy - margin);

        // 마지막 카드(맨 오른쪽)는 전체 영역을 검사합니다.
        if (i == myCardCount - 1)
        {
            if (cardRect.PtInRect(point))
            {
                return i; // i번째 카드 클릭됨
            }
        }
        else // 겹쳐진 카드들은 보이는 부분(왼쪽 overlap 만큼)만 검사합니다.
        {
            CRect visibleRect = cardRect;
            visibleRect.right = visibleRect.left + overlap; // 보이는 영역만 사각형으로 만듦
            if (visibleRect.PtInRect(point))
            {
                return i; // i번째 카드 클릭됨
            }
        }
    }

    return -1; // 아무 카드도 클릭되지 않음
}
BOOL COneCardDlg::OnEraseBkgnd(CDC* pDC)
{
    //return CDialogEx::OnEraseBkgnd(pDC);
    return TRUE;
}

void COneCardDlg::OnMouseMove(UINT nFlags, CPoint point)
{
    // 1. 현재 마우스 위치에 있는 카드의 인덱스를 찾습니다.
    //    GetClickedCardIndex 함수를 재활용합니다.
    int nNewIndex = GetClickedCardIndex(point);

    // 2. 이전에 강조했던 카드와 현재 카드가 다를 경우에만 갱신합니다. (성능 최적화)
    if (nNewIndex != m_nHighlightedCardIndex)
    {
        // 3. 강조할 카드의 인덱스를 업데이트합니다.
        m_nHighlightedCardIndex = nNewIndex;

        // 4. 화면을 다시 그리도록 요청합니다.
        Invalidate(FALSE); // TRUE로 하면 배경을 지우므로 깜빡일 수 있음
    }

    CDialogEx::OnMouseMove(nFlags, point);
}

void COneCardDlg::OnDestroy()
{
    CDialogEx::OnDestroy();
	PostQuitMessage(0);
}

LRESULT COneCardDlg::OnShowDialog(WPARAM wParam, LPARAM lParam)
{
    ChildDlg dlg(this);
    dlg.DoModal();

    return 0;
}